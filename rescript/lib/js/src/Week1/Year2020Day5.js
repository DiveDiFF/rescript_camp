// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var input = Fs.readFileSync("input/Week1/Year2020Day5.sample.txt", "utf8");

var inputList = input.split("\n");

function getSeatId(seats, maxId) {
  var match = Belt_Array.reduce(seats, [
        0,
        maxId
      ], (function (param, seat) {
          var max = param[1];
          var min = param[0];
          if (seat) {
            return [
                    min,
                    (min + max | 0) / 2 | 0
                  ];
          } else {
            return [
                    ((min + max | 0) / 2 | 0) + 1 | 0,
                    max
                  ];
          }
        }));
  var max = match[1];
  if (match[0] !== max) {
    Js_exn.raiseError("min, max is not equal");
  }
  return max;
}

function parser(seat) {
  var verticalId = getSeatId(Belt_Array.map(seat.substring(0, 7).split(""), (function ($$char) {
              switch ($$char) {
                case "B" :
                    return /* Up */0;
                case "F" :
                    return /* Down */1;
                default:
                  return Js_exn.raiseError("" + $$char + " is not valid character");
              }
            })), 127);
  var horizontalId = getSeatId(Belt_Array.map(seat.substring(7, 10).split(""), (function ($$char) {
              switch ($$char) {
                case "L" :
                    return /* Down */1;
                case "R" :
                    return /* Up */0;
                default:
                  return Js_exn.raiseError("" + $$char + " is not valid character");
              }
            })), 7);
  return (verticalId << 3) + horizontalId | 0;
}

var resultList = Belt_Array.map(inputList, parser).sort(function (a, b) {
      return b - a | 0;
    });

console.log(Belt_Array.get(resultList, 0));

var v = Belt_Array.get(resultList, 0);

console.log(Caml_option.undefined_to_opt(Belt_Array.range(0, v !== undefined ? v : -1).sort(function (a, b) {
                return b - a | 0;
              }).find(function (x, i) {
              if (i < (resultList.length - 1 | 0)) {
                return x !== Caml_array.get(resultList, i);
              } else {
                return false;
              }
            })));

var maxSeatVertical = 127;

var maxSeatHorizontal = 7;

exports.input = input;
exports.inputList = inputList;
exports.maxSeatVertical = maxSeatVertical;
exports.maxSeatHorizontal = maxSeatHorizontal;
exports.getSeatId = getSeatId;
exports.parser = parser;
exports.resultList = resultList;
/* input Not a pure module */
